// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum ClientCategory {
  personal
  group
  self
  cricketer
}

enum Shift {
  morning
  evening
}

enum TrainerShift {
  morning
  evening
  both
}

enum Gender {
  male
  female
}

model Client {
  id       Int            @id @default(autoincrement())
  name     String
  contact  String
  gender   Gender
  category ClientCategory
  fee      Int
  shift    Shift
  status   String         @default("active")
  joinedAt DateTime       @default(now())

  // Relationships
  assignedTrainer   Trainer? @relation("Client_assignedTrainer", fields: [assignedTrainerId], references: [id])
  assignedTrainerId Int?

  groupClass   GroupClass? @relation(fields: [groupClassId], references: [id])
  groupClassId Int?

  payments   Payment[]
  attendance Attendance[]
}

model Trainer {
  id              Int          @id @default(autoincrement())
  name            String
  specialization  String?
  shift           TrainerShift
  canTakeGroup    Boolean
  canTakePersonal Boolean

  // Opposite side of Client.assignedTrainer
  personalClients Client[]     @relation("Client_assignedTrainer")
  groupClasses    GroupClass[]
}

model GroupClass {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  trainer   Trainer  @relation(fields: [trainerId], references: [id])
  trainerId Int
  time      String
  days      String[]
  shift     Shift
  gender    Gender // optional if class is gender-specific

  clients Client[]
}

model Payment {
  id       Int      @id @default(autoincrement())
  client   Client   @relation(fields: [clientId], references: [id])
  clientId Int
  amount   Int
  month    String
  paidAt   DateTime @default(now())
  method   String // cash, bank, online
}

model Attendance {
  id        Int            @id @default(autoincrement())
  client    Client         @relation(fields: [clientId], references: [id])
  clientId  Int
  date      DateTime
  shift     Shift
  type      ClientCategory
  trainerId Int?
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
